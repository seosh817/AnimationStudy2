
version: 2.1

orbs:
  android: circleci/android@1.0.3
  
executors:
    android-executor:
        docker:
            - image: circleci/android:api-30
        resource_class: medium
  
jobs:
  build-and-test:
    # These next lines define the Android machine image executor.
    # See: https://circleci.com/docs/2.0/executor-types/
    executor:
      name: android/android-machine
    working_directory: ~/code

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout
      - run:
          name: submodule
          command: |
            git submodule sync
            git submodule update --init --recursive

      # And finally run the release build
      - run:
          name: Assemble release build
          command: |
            ./gradlew assembleRelease
      - persist_to_workspace:
          root: .
          paths:
          - .
#      - run:
#          name: Install fastlane
#          command: bundle install
#      - run:
#          name: Execute fastlane
#          command: bundle exec fastlane playstore

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
  test:
    executor:
      name: android/android-machine
      resource-class: medium
    steps:
      - attach_workspace:
          at: .
          
      # The next step will run the unit tests
      - android/run-tests:
          test-command: ./gradlew lint testDebug --continue

      # Then start the emulator and run the Instrumentation tests!
      - android/start-emulator-and-run-tests:
          test-command: ./gradlew connectedDebugAndroidTest
          system-image: system-images;android-30;google_apis;x86
      # Create an AVD named "myavd"
      - android/create-avd:
          avd-name: myavd
          system-image: system-images;android-29;default;x86
          install: true
      # By default, after starting up the emulator, a cache will be restored,
      # "./gradlew assembleDebugAndroidTest" will be run and then a script
      # will be run to wait for the emulator to start up.
      # Specify the "post-emulator-launch-assemble-command" command to override
      # the gradle command run, or set "wait-for-emulator" to false to disable
      # waiting for the emulator altogether.
      - android/start-emulator:
          avd-name: myavd
          no-window: true
          restore-gradle-cache-prefix: v1a
      # Runs "./gradlew connectedDebugAndroidTest" by default.
      # Specify the "test-command" parameter to customize the command run.
      - android/run-tests
      - android/save-gradle-cache:
          cache-prefix: v1a
  build:
    executor:
      name: android-executor
    steps:
    - attach_workspace:
        at: .
    - run:
        command: |
          sdkmanager "system-images;android-29;default;x86"
        name: Install system image "system-images;android-29;default;x86"
    - run:
        command: |
          find . -name 'build.gradle' | sort | xargs cat |
          shasum | awk '{print $1}' > ./tmp_gradle_cache_seed
        name: Generate cache checksum
    - restore_cache:
        key: gradle-v1a-{{ arch }}-{{ checksum "./tmp_gradle_cache_seed" }}
        name: Restore gradle cache
    - run:
        command: |
          ./gradlew build
        name: 'Run: ./gradlew build'
    - save_cache:
        key: gradle-v1a-{{ arch }}-{{ checksum "./tmp_gradle_cache_seed" }}
        name: Save gradle cache
        paths:
        - ~/.gradle/caches
        - ~/.gradle/wrapper
    - save_cache:
        key: gradle-properties-${CIRCLE_WORKFLOW_ID}_21
        name: Save gradle properties
        paths:
          - ~/.gradle/gradle.properties
    - store_artifacts:
        path: animation-practice/build/reports
        destination: reports
    - store_test_results:
        path: animation-practice/build/test-results
    - store_artifacts:
        path: app/build/outputs/apk/release
        destination: apk
    - store_artifacts:
        path: app/build/outputs/mapping/release
        destination: mapping
#    - persist_to_workspace:
#        root: .
#        paths:
#          - .
#    resource_class: medium
  deploy:
    docker:
      - image: circleci/android:api-30
    working_directory: ~/code
    steps:
      - attach_workspace:
          at: .
      - restore_cache:
          key: gradle-v1a-{{ arch }}-{{ checksum "./tmp_gradle_cache_seed" }}
          name: Restore gradle cache
#      - run:
#          name: Upload Maven Central
#          command: ./gradlew uploadArchives

workflows:
  version: 2
  build_deploy:
    jobs:
    - build-and-test
    - test:
       requires:
          - build-and-test
    - build:
        requires:
          - build-and-test
          - test
    - deploy:
        requires:
          - build
          - build-and-test
        filters:
          branches:
            only:
              - master
              - /release\/.*/
